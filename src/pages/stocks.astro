---
import Layout from '../layouts/Layout.astro';
import { h } from 'preact';
import { useState, useEffect } from 'preact/hooks';
---

<Layout>
  <section class="py-20 relative">
    <div class="container mx-auto text-center">
      <h2 class="text-4xl font-bold mb-10">Stock Market Data</h2>
      <input 
        type="text" 
        id="stockInput"
        class="mb-4 p-2 border border-gray-300 rounded"
        placeholder="Enter stock handle or title" 
      />
      <button 
        id="fetchButton"
        class="bg-blue-600 text-white px-4 py-2 rounded"
      >
        Fetch Data
      </button>

      <div id="stockInfo" class="mt-4 italic hidden"></div>
      <div id="additionalInfo" class="mt-4 hidden">
        <p id="priceChange" class="text-lg font-semibold"></p>
        <p id="marketCap" class="text-lg"></p>
        <p id="revenue" class="text-lg"></p>
      </div>

      <div id="timeRangeButtons" class="mt-8 hidden">
        <button class="px-4 py-2" data-range="1D">1D</button>
        <button class="px-4 py-2" data-range="1W">1W</button>
        <button class="px-4 py-2" data-range="1M">1M</button>
        <button class="px-4 py-2" data-range="1Y">1Y</button>
        <button class="px-4 py-2" data-range="ALL">ALL</button>
      </div>

      <div id="chartContainer" class="mt-8">
        <canvas id="stockChart"></canvas>
      </div>
    </div>

    <div id="errorPopup" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative max-w-md mx-auto">
        <strong class="font-bold">Error</strong>
        <span class="block sm:inline">Unfortunately, my API has been ratelimited. Please come back in 1-2 minutes to try again.</span>
      </div>
    </div>
  </section>

  <script type="module">
    import Chart from './node_modules/chart.js/auto';
    import './node_modules/chartjs-adapter-date-fns';

    const fetchButton = document.getElementById('fetchButton');
    const stockInput = document.getElementById('stockInput');
    const chartContainer = document.getElementById('chartContainer');
    const timeRangeButtons = document.getElementById('timeRangeButtons').querySelectorAll('button');
    const timeRangeButtonsContainer = document.getElementById('timeRangeButtons');
    const stockInfo = document.getElementById('stockInfo');
    const additionalInfo = document.getElementById('additionalInfo');
    const priceChange = document.getElementById('priceChange');
    const marketCapElement = document.getElementById('marketCap');
    const revenueElement = document.getElementById('revenue');
    let chartInstance = null;
    let currentStock = '';
    let timeRange = '1M'; // Default time range to 1 Month

    fetchButton.addEventListener('click', fetchStockData);

    timeRangeButtons.forEach(button => {
      button.addEventListener('click', () => handleTimeRangeChange(button.dataset.range));
    });

    async function fetchStockData() {
      currentStock = stockInput.value.trim();
      if (!currentStock) {
        console.log('No stock input');
        return;
      }

      try {
        const response = await fetch(`/api/fetch.json?stock=${encodeURIComponent(currentStock)}&range=${timeRange}`);
        const data = await response.json();

        if (response.status >= 500 || (data.error && data.error.includes("You've exceeded the maximum requests per minute"))) {
          showPopup();
        } else if (!data.error) {
          renderChart(data);
          updateStockInfo(data);
          updateAdditionalInfo(data);
          timeRangeButtonsContainer.classList.remove('hidden');
          additionalInfo.classList.remove('hidden');
        } else {
          console.error(data.error);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
        showPopup();
      }
    }

    function handleTimeRangeChange(range) {
      timeRange = range;
      fetchStockData();
    }

    function renderChart(data) {
      const ctx = document.getElementById('stockChart').getContext('2d');

      if (chartInstance) {
        chartInstance.destroy();
      }

      const latestPrice = data.prices[data.prices.length - 1];
      const initialPrice = data.prices[0];
      const isPositive = latestPrice >= initialPrice;

      chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels: data.dates,
          datasets: [{
            label: `Stock Prices for ${data.stock}`,
            data: data.prices,
            borderColor: isPositive ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)',
            backgroundColor: isPositive ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)',
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              type: 'time',
              time: {
                unit: timeRange === '1D' ? 'hour' : 
                       timeRange === '1W' ? 'day' : 
                       timeRange === '1M' ? 'week' : 
                       timeRange === '1Y' ? 'month' : 'year'
              },
              title: {
                display: true,
                text: 'Date'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Price'
              }
            }
          },
          plugins: {
            legend: {
              display: true,
              position: 'top'
            },
            tooltip: {
              mode: 'index',
              intersect: false
            },
            hover: {
              mode: 'nearest',
              intersect: true
            }
          }
        }
      });
    }

    function updateStockInfo(data) {
      const latestPrice = data.prices[data.prices.length - 1];
      const stockName = data.stock;
      stockInfo.innerHTML = `${timeRange}, for ${stockName} @ ${latestPrice}`;
      stockInfo.classList.remove('hidden');
    }

    function updateAdditionalInfo(data) {
      const latestPrice = data.prices[data.prices.length - 1];
      const initialPrice = data.prices[0];
      const priceDifference = latestPrice - initialPrice;
      const priceDifferencePercentage = ((priceDifference / initialPrice) * 100).toFixed(2);
      const marketCap = data.marketCap ? formatLargeNumber(data.marketCap) : 'N/A';
      const revenue = data.revenue ? formatLargeNumber(data.revenue) : 'N/A';

      priceChange.innerHTML = `Change: <span class="${priceDifference >= 0 ? 'text-green-500' : 'text-red-500'}">${priceDifference.toFixed(2)} (${priceDifferencePercentage}%)</span>`;
      marketCapElement.innerHTML = `Market Cap: ${marketCap}`;
      revenueElement.innerHTML = `Revenue: ${revenue}`;
    }

    function formatLargeNumber(number) {
      if (number >= 1e12) {
        return `${(number / 1e12).toFixed(2)} T`;
      } else if (number >= 1e9) {
        return `${(number / 1e9).toFixed(2)} B`;
      } else if (number >= 1e6) {
        return `${(number / 1e6).toFixed(2)} M`;
      } else {
        return number.toString();
      }
    }

    function showPopup() {
      const popup = document.getElementById('errorPopup');
      popup.classList.remove('hidden');
    }

    // Fetch data when the page loads with the default time range
    document.addEventListener('DOMContentLoaded', fetchStockData);
  </script>
</Layout>
